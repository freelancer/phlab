@title Arcanist User Guide
@group overview

Arcanist provides command-line access to many Phabricator tools (like
Differential, Files, and Paste), integrates with static analysis ("lint") and
unit tests, and manages common workflows like getting changes into Differential
for review.

This document outlines our usage of Arcanist at Freelancer. For more detailed
instructions on Arcanist, see the
[[https://secure.phabricator.com/book/phabricator/article/arcanist/ | Arcanist
User Guide]]. The
[[https://secure.phabricator.com/book/phabricator/article/arcanist_quick_start/ |
Quick Start Guide]] has most of the information that you should require in order
to install `arc`.

It is important to note that the Phabricator codebase (including
[[https://secure.phabricator.com/diffusion/ARC/ | arcanist]]) is very
fast-moving and new features are added frequently. As such, it is generally
recommended that you keep your Arcanist installation up-to-date. The recommended
way to upgrade Arcanist is with the `arc upgrade` command.

== Advantages ==
There are many advantages to using `arc` commands (in favor of raw `git`
commands) as part of our code development/deployment working:

  - Configuration is stored in a file in the repository. If we want to modify
    our workflow to use a different landing strategy (for example), then we only
    need to modify the repository's `.arcconfig` file. We don't need to keep
    everyone up-to-date on the appropriate commands and flags that should be
    used in various situations.
  - Integration with Differential and Diffusion. By using Arcanist, we get a lot
    of extra features for free. Whilst it is still possible to use these
    additional features without using `arc`, it is much more error prone.
  - More consistent commit messages. This means that it is easy to backtrace an
    individual commit to the differential and to the underlying ticket.

== Useful Tips ==
This section documents some useful hints and tips for working with the `arc`
command.

  - If you haven't already done so, I'd also recommend setting up tab completion
    for the `arc` command.
  - You can define custom command aliases with the `arc alias` command. This is
    useful if you find yourself running the same set of commands often enough.
    This functionality is very similar to
    [[https://git.wiki.kernel.org/index.php/Aliases | Git aliases]].
  - Arcanist has multiple layers of configuration that can be configured. Use
    the `arc get-config` and `arc set-config` commands to interact with the
    Arcanist configuration:
    - Project configuration is defined in the `.arcconfig` file in a repository.
    - Local configuration is defined in the `.git/arc/config` file. This is
      analogous to the `.git/config` file.
    - User configuration is defined in the `~/.arcrc` file.
  - Use `arc help` to list all available commands and `arc help <command>` to
    get help regarding a specific `arc` command.
  - You can add `--trace` to any `arc` command to enable verbose logging.

== Code Review ==
In order to submit code for review, you should use the `arc diff` command.
Basically, `arc diff` acts as an interface to Differential and is essentially a
thin wrapper around `git` and the [[https://phabricator.freelancer.com/conduit/ |
Phabricator API (Conduit)]]. You can read more information about the
`arc diff` command in the
[[https://secure.phabricator.com/book/phabricator/article/arcanist_diff/ |
official Arcanist User Guide]].

=== Commit Ranges ===
In Git, `arc diff` sends all commits in a range for review. By default, this
range is `$(git merge-base origin/master HEAD)..HEAD`. That's a fancy way of
saying "all the commits on the current branch that you haven't pushed yet".
Since it uses all the commits on the branch, you can make several commits before
sending your changes for review if you prefer. Additionally, a `base` can be
configured in a project's `.arcconfig` file. This will override the default
commit range. For example, in rGAF the `base` range is set to
`git:merge-base(production/master), arc:upstream, arc:prompt`. This means that
the following rules will be applied when determining the commit range:

  # The commit hash that is output by `git merge-base production/master HEAD`.
  # The `arc` upstream commit (essentially, this will attempt to match an
    existing differential).
  # An interactive prompt will ask the user to select a commit range.

Alternatively, you can explicitly specify a commit on the command line. For
example, `arc diff HEAD~` will create a diff from your `HEAD` commit.

==== Force Create / Update ====
`arc` uses information about the working copy (like the path, branch name, local
commit hashes, and local tree hashes, depending on which version control system
you are using) to figure out whether you intend to create or update a revision.
If it guesses incorrectly, you can force it to either create or update a
revision with:

```lang=bash
$ arc diff --create             # Force "create".
$ arc diff --update <revision>  # Force "update".
```

You can figure out what `arc` believes to be in the working copy with
`arc which`.

=== Fields ===
It is important to ensure that differential fields (such as "Summary" and
"Test Plan") are comprehensive. The fields that are submitted to Differential
are essentially what will appear in the repository as commit messages. These
fields will become permanently etched in the repository's commit history and
serve as a valuable reference in the future. In particular:

  - Ensure that differentials properly reference any related tickets. You can
    use `Ref T123` to reference a ticket from a differential and you are
    strongly encouraged to do so. Using this annotation means that the ticket
    will be linked to the differential (and vice versa), which will make it
    easier for the reviewer (and other subscribers) to understand the context
    of the change.
  - In addition to the `Ref T123` annotation, you can use `Fixes T123` to
    describe a stronger relationship between a differential and a Maniphest
    ticket. Using the `Fixes T123` annotation means that the ticket will be
    automatically closed (i.e. marked as "Resolved") when the change is landed.
  - If your change is dependent on another differential, make sure that this is
    explicitly annotated with `Depends on D123`. You must do this to ensure
    that your change is not pushed prematurely.
  - The differential title should be succinct. The title should summarize the
    change and should generally be less than 100 characters. You should not
    reference tickets within the differential title.
  - The differential summary should:
    - Reference any (and all) related tickets, if appropriate.
    - Clearly explain the context of the change.
    - Discuss your implementation and any potential side-effects and/or risks.
    - Include as much context as possible.
    - Be well-structured and well-written.
  - The differential test plan should:
    - Be comprehensive. You should list the exact steps that were used to test
      the change.
    - Include test output, if appropriate. This can include command-line output
      and/or screenshots.
    - Be easily reproducible.
    - Be well-structured and well-written.

== Code Deployment ==
After changes have been accepted, you generally push them and close the
revision. `arc` has several workflows which help with this, by:

  - Squashing or merging changes from a feature branch into a master branch
    (if relevant);
  - Formatting a good commit message with all the information from Differential;
    and
  - Automatically closing the revision.

The workflows `arc` supports are:

  - `arc land`: Works in Git if you develop in feature branches. Does a merge
    or squash-merge from your feature branch into some master branch, provides
    a detailed commit message, pushes master, and then deletes your branch.
  - `arc amend`: Works in Git if you can't use `arc land`. Amends `HEAD` with a
    detailed commit message.
  - `arc close-revision`: Works anywhere, closes a revision from the CLI
    without going through the web UI.
  - `arc patch`: Apply the changes in a Differential revision, patch file, or
    `arc bundle` to the working copy.

You can use `arc help <command>` for detailed help with any of these.

Phabricator will also automatically close revisions, if the changes are pushed
to a repository that is tracked in Diffusion. Specifically, it will close
revisions based on commit and tree hashes, and Differential Revision identifiers
in commit messages. If you push to an untracked repository (or `arc` can't
figure out that it's tracked), `arc land`, `arc amend` and `arc commit` will
implicitly run `arc close-revision`.

=== `arc land` ===
The `arc land` workflow should be used to land //your own// changes.
Specifically, `arc land` will land an acceptance change (currently sitting in a
local feature branch) onto master and push it to the remote. In mutable
repositories (which is the default), this will perform a `--squash` merge (the
entire branch will be represented by one commit on the master branch). In
immutable repositories (or when `--merge` is provided), it will perform a
`--no-ff` merge (the branch will always be merged into the master branch with a
merge commit).

==== Useful Tips ====
  - Running `arc land` (without specifying a branch) will land the //current//
    branch.
  - Specify `--delete-remote` to delete the remote tracking branch as well.
    Note that you should normally not need to push your local branches to
    remote anyway.
  - Use the `--hold` flag to prepare the change to be pushed, without actually
    pushing it.
  - Use the `--merge` flag to explicitly perform a `git merge --no-ff`.
  - Use the `--squash` flag to explicitly perform a `git merge --squash`. This
    is the default behavior and should be adequate for most cases.

=== `arc patch` ===
The `arc patch` workflow should be used to land //someone else's// changes.
Specifically, `arc patch` will download the changeset from a differential and
apply it to the local working copy. The default behavior of the `arc patch`
workflow is to create new branch by checking out the commit hash that was used
to submit the differential, and then patching the changeset onto this commit.
Alternatively, you can use `arc patch --no-branch` to patch the changeset onto
the current `HEAD` (this is essentially a `git cherry-pick`).

Additionally, `arc patch` will also attempt to apply all dependencies that are
not present in the working copy. For example, if you have `D456` which depends
on `D123`, then `arc patch D456` should first apply `D123`.

To land a differential with `arc patch`, you should follow the following steps:

  # Checkout the master branch.
  # Run `arc patch --nobranch D123`.
  # Use `git push` to push the changes to the remote.

= Next Steps =
Continue by:

  - Reading the official [[https://secure.phabricator.com/book/phabricator/article/arcanist/ | Arcanist User Guide]]; or
  - Returning to the @{article:phabricator@Overview}.
